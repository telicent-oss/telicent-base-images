name: build-release-images

on:
  workflow_dispatch:
    inputs:
      image_matrix:
        type: string
        description: |
          A list of images descriptors to be used as a matrix e.g telicent-base-java - from image descriptors.
          File extensions need to be omitted.
      tag:
        description: "Specify the tag to build (must exist in the format v<major>.<minor>.<patch>)"
        required: true
        type: string
  workflow_run:
    workflows: [ handle-release-pr-merged ]
    types: [ completed ]

permissions:
  contents: write
  pull-requests: write

jobs:
  validate-tag:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    outputs:
      tag: ${{ steps.validate.outputs.tag }}
    steps:
      - name: Download and Extract Tag Artifact (if triggered by workflow)
        if: ${{ github.event_name == 'workflow_run' }}
        uses: actions/download-artifact@v4
        with:
          name: tag_version
          path: ./tag

      - name: Unzip Tag Artifact
        if: ${{ github.event_name == 'workflow_run' }}
        run: |
          if [ -f ./tag/tag_version.zip ]; then
            unzip ./tag/tag_version.zip -d ./tag
          fi

      - name: Validate Tag
        env:
          TAG_FROM_ARTIFACT: ${{ github.event_name == 'workflow_run' }}
          TAG_FROM_INPUTS: ${{ github.event.inputs.tag || '' }}
        run: |
          echo "Checking tag source..."

          if [ -f ./tag/tag_version/tag_version ]; then
            TAG_FROM_ARTIFACT=$(cat ./tag/tag_version/tag_version)
            TAG="$TAG_FROM_ARTIFACT"
            echo "Tag retrieved from artifact: $TAG" 
          elif [ -n "$TAG_FROM_INPUTS" ]; then
            TAG="$TAG_FROM_INPUTS"
            echo "Tag retrieved from manual dispatch inputs: $TAG" 
          else
            echo "Error: No tag provided or detected."
            exit 1
          fi

          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "Validate Tag: $TAG"

          if [[ ! "$TAG" =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            echo "Error: The tag must be in the format v<major>.<minor>.<patch>, where each part is 1-3 digits."
            exit 1
          fi
          if ! git fetch --tags && git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Error: The specified tag ($TAG) does not exist in the repository."
            exit 1
          fi
          echo "Tag validated: $TAG"
          echo "tag=$TAG" >> $GITHUB_ENV

  detect-changed-images:
    needs: validate-tag
    uses: ./.github/workflows/detect-changed-images.yaml
    with:
      TAG_VERSION: ${{ needs.validate-tag.outputs.tag }}

  build-images-with-reusable-workflow:
    secrets: inherit
    needs:
      - validate-tag
      - detect-changed-images
    uses: ./.github/workflows/reusable-image-builder.yaml
    with:
      IMAGE-DESCRIPTORS: ${{ needs.detect-changed-images.outputs.images }}
      TAG: ${{ needs.validate-tag.outputs.tag }}

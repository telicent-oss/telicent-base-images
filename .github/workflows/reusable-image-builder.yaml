name: reusable-image-builder.yaml

on:
  workflow_call:
    inputs:
      IMAGE-DESCRIPTORS:
        description: "List of images to build"
        required: true
        type: string
      TAG:
        description: "Specify the tag to build (must exist in the format v<major>.<minor>.<patch>)"
        required: true
        type: string
      GRYPE_SECURITY_ISSUES_BLOCK_ONLY_IF_FIX_AVAILABLE:
        required: false
        default: false
        type: boolean
        description: |
          Sets --only-fixed flag for Grype

jobs:
  test_inputs:
    runs-on: ubuntu-latest
    steps:
      - name: Check inputs
        run: |
          echo "Raw inputs: ${{ inputs.IMAGE-DESCRIPTORS }}
          echo "Parsed inputs: ${{ fromJson(inputs.IMAGE-DESCRIPTORS)}}

  build-push-image:
      needs: test_inputs
      runs-on: ubuntu-latest
      strategy:
        fail-fast: false
        matrix:
          image: ${{ fromJson(inputs.IMAGE-DESCRIPTORS)}}
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4
          with:
            ref: ${{ inputs.TAG }}
            fetch-depth: 0

        - name: Install Python and PIP
          run: |
            sudo apt-get update
            sudo apt-get install -y python3 python3-pip

        - name: Install Cekit
          run: |
            python3 -m pip install --upgrade pip
            python3 -m pip install cekit

        - name: Generate Dockerfile
          run: |
            cekit --descriptor image-descriptors/${{ matrix.image }}.yaml build --dry-run docker 

        - name: Extract Image Version and Name
          id: extract
          run: |
            descriptor_path="target/image.yaml"

            # Extract version using yq - input: version: &version "1.0.7" output - 1.0.7
            current_version=$(yq eval '.version' "$descriptor_path" | sed 's/^[ \t]*//;s/[ \t]*$//')

            # Extract image name using yq 
            image_name=$(yq eval '.labels[] | select(.name == "name") | .value' "$descriptor_path")

            echo "Extracted version: $current_version"
            echo "Extracted image name: $image_name"
            
            echo "image_version=$current_version" >> $GITHUB_OUTPUT
            echo "image_name=$image_name" >> $GITHUB_OUTPUT

        - name: Verify Correct Context
          shell: bash
          run: | 
            [ -f ./target/image/Dockerfile ] || $(echo "Missing Dockerfile in ./target" && exit 1)

        - name: Set up QEMU
          uses: docker/setup-qemu-action@v3

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3

        - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
            username: "${{ secrets.DOCKER_USERNAME }}"
            password: "${{ secrets.DOCKER_PASSWORD }}"

        - name: Build and Push Image
          uses: docker/build-push-action@v5
          with:
            context: ./target/image
            file: ./target/image/Dockerfile
            platforms: linux/amd64,linux/arm64
            push: true
            tags: |
              "telicent/${{ steps.extract.outputs.image_name }}:latest"
              "telicent/${{ steps.extract.outputs.image_name }}:${{ steps.extract.outputs.image_version }}"

        - name: Grype Container Vulnerability Scan
          id: grype-scan
          uses: anchore/scan-action@v4.1.2
          with:
            image: telicent/${{ steps.extract.outputs.image_name }}:${{ steps.extract.outputs.image_version }}
            output-format: json
            fail-build: false

        - name: Upload Vulnerability Scan Results
          uses: actions/upload-artifact@v4.4.3
          with:
            name: grype-docker-report-${{ steps.extract.outputs.image_name }}-${{ steps.extract.outputs.image_version }}
            path: ${{ steps.grype-scan.outputs.json }}
            retention-days: 30

        - name: Fail Build on High/Critical Vulnerabilities
          uses: anchore/scan-action@v4.1.2
          with:
            image: telicent/${{ steps.extract.outputs.image_name }}:${{ steps.extract.outputs.image_version }}
            output-format: table
            severity-cutoff: high
            fail-build: true
            only-fixed: ${{ inputs.SECURITY_ISSUES_BLOCK_ONLY_IF_FIX_AVAILABLE }}

        - name: Trivy Image Scan
          id: trivy-scan
          uses: telicent-oss/trivy-action@v1
          with:
            scan-name: ${{ steps.extract.outputs.image_name }}
            scan-ref: telicent/${{ steps.extract.outputs.image_name }}:${{ steps.extract.outputs.image_version }}
            scan-type: image
            uses-java: true

        - name: Generate SBOM for image
          uses: aquasecurity/trivy-action@master
          env:
            # NB - Our prior Trivy step MAY generate a TRIVY_VEX file and add it to GITHUB_ENV but it also removes that
            #      file thus subsequent Trivy steps, like this one, can fail due to the missing file.  We can however
            #      explicitly override it to an empty string to avoid that.
            TRIVY_VEX: ""
          with:
            scan-type: 'image'
            format: 'cyclonedx'
            output: trivy-image-scan-sbom-${{ steps.extract.outputs.image_name }}-${{ steps.extract.outputs.image_version }}.json
            image-ref: telicent/${{ steps.extract.outputs.image_name }}:${{ steps.extract.outputs.image_version }}
            cache-dir: .trivy
            # Counter-intuitive BUT trivy-action has its own cache which duplicates our own but in a less flexible way
            cache: false

        - name: Release SBOM for image (IF has tags for release)
          if: startsWith(github.ref, 'refs/tags/')
          uses: softprops/action-gh-release@v2.0.8
          with:
            files: |
              trivy-image-scan-sbom-${{ steps.extract.outputs.image_name }}-${{ steps.extract.outputs.image_version }}.json

        - name: Release report on docker sbom (IF has tags for release)
          if: startsWith(github.ref, 'refs/tags/')
          uses: softprops/action-gh-release@v2.0.8
          with:
            files: |
              ${{ steps.trivy-scan.outputs.scan-results-file }}

  notify-teams:
    name: Notify Teams on Workflow Result
    needs: [ test_inputs, build-push-image ]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Teams
        env:
          TEAMS_WORKFLOW_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
          IMAGE_NAME: ${{ needs.build-push-image.outputs.image_name }}
          IMAGE_VERSION: ${{ needs.build-push-image.outputs.image_version }}
          JOB_STATUS: ${{ needs.build-push-image.result }}
        run: |
          build_url="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          if [ "$JOB_STATUS" = "success" ]; then
            icon_url="https://github.com/telicent-oss/telicent-base-images/blob/main/.github/workflows/assets/check-green.png"
            message_title="Workflow Success: ${{ github.workflow }}"
            message_text="The build and push process for the image completed successfully. Details are below:"
          else
            icon_url="https://github.com/telicent-oss/telicent-base-images/blob/main/.github/workflows/assets/error-transparent.png"
            message_title="Workflow Failure: ${{ github.workflow }}"
            message_text="The build and push process for the image has failed. See details below:"
          fi
          
          cat > payload.json << EOF
          {
            "attachments": [
              {
                "contentType": "application/vnd.microsoft.card.adaptive",
                "content": {
                  "type": "AdaptiveCard",
                  "\$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
                  "version": "1.4",
                  "body": [
                    {
                      "type": "Image",
                      "url": "$icon_url",
                      "altText": "Workflow Result Icon",
                      "size": "Medium",
                      "style": "Default"
                    },
                    {
                      "type": "TextBlock",
                      "size": "Large",
                      "weight": "Bolder",
                      "text": "$message_title",
                      "wrap": true
                    },
                    {
                      "type": "TextBlock",
                      "text": "$message_text",
                      "wrap": true
                    },
                    {
                      "type": "FactSet",
                      "facts": [
                        {
                          "title": "Repository:",
                          "value": "${{ github.repository }}"
                        },
                        {
                          "title": "Run ID:",
                          "value": "${{ github.run_id }}"
                        },
                        {
                          "title": "Image:",
                          "value": "$IMAGE_NAME:$IMAGE_VERSION"
                        }
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": "Action.OpenUrl",
                      "title": "View Workflow Details",
                      "url": "$build_url"
                    }
                  ]
                }
              }
            ]
          }
          EOF
          
          curl -X POST -H "Content-Type: application/json" -d @payload.json "${{ env.TEAMS_WORKFLOW_URL }}"

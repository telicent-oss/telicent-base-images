name: Create or Update Release Branch

on:
  workflow_dispatch:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

permissions:
  contents: write
  pull-requests: write

jobs:
#  detect-release-merge:
#    name: Detect if Merge is from a Release Branch
#    runs-on: ubuntu-latest
#    outputs:
#      is_release_merge: ${{ steps.detect.outputs.is_release_merge }}
#    steps:
#      - name: Checkout Repository
#        uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#
#      - name: Check for Release Branch Merge
#        id: detect
#        run: |
#          echo "Event name: ${{ github.event_name }}"
#          echo "Base branch: ${{ github.event.pull_request.base.ref }}"
#          echo "Head branch: ${{ github.event.pull_request.head.ref }}"
#          echo "Before SHA: ${{ github.event.before }}"
#          echo "After SHA: ${{ github.event.after }}"
#
#          IS_RELEASE_MERGE="false"
#
#          if [[ "${{ github.event_name }}" == "push" ]]; then
#            # Check commit range for release branch commits
#            git log ${{ github.event.before }}..${{ github.event.after }} --pretty=format:"%H %s"
#            if [[ $? -eq 0 ]]; then
#              IS_RELEASE_MERGE="true"
#            fi
#          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
#            # Check PR source branch
#            if [[ "${{ github.event.pull_request.head.ref }}" =~ ^release/ ]]; then
#              IS_RELEASE_MERGE="true"
#            fi
#          fi
#
#          echo "is_release_merge=${IS_RELEASE_MERGE}" >> $GITHUB_OUTPUT

  changed-images:
    name: Detect Changes
    if: >
      ${{ !contains(github.event.head_commit.message, 'release') }} && 
      ${{github.event.head_commit.author.name, 'github-actions[bot]')}}"
    uses: ./.github/workflows/detect-changed-images.yaml

  create-release-pr:
    needs: [changed-images]
    if: >
      ${{ !contains(github.event.head_commit.message, 'release') }} && 
      {{ !contains(github.event.head_commit.author.name, 'github-actions[bot]')}}
    name: Create or Update Release PR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine Next Release Version
        id: determine-version
        run: | 
          # Extract the last release tag
          LAST_TAG=$(git describe --tags --abbrev=0 || echo "v0.0.0")
          echo "Last tag: $LAST_TAG"

          # Extract version numbers
          VERSION_PARTS=($(echo "${LAST_TAG}" | sed 's/v//' | tr '.' ' '))
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}

          # Determine bump type based on commit messages
          if git log "$LAST_TAG"..HEAD --oneline | grep -q "BREAKING CHANGE"; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif git log "$LAST_TAG"..HEAD --oneline | grep -q "feat"; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif git log "$LAST_TAG"..HEAD --oneline | grep -q -E "fix|chore"; then
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_ENV
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update Versions in Image Descriptors
        id: update-versions
        run: |
          echo "Updating image descriptors for version ${{ env.new_version }}."
          echo "Images that need updates: ${{ needs.changed-images.outputs.images }}"
          ./update_version.sh ${{ needs.changed-images.outputs.images }}

      - name: Append Changelog
        id: generate-changelog
        run: |
          ./generate_changelog.sh
          echo "Generated changelog:"
          cat CHANGELOG.md

      - name: Commit Changes and Create Release Branch
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "chore: prepare release ${{ env.new_version }}" || echo "No changes to commit."

      - name: Open or Update Release PR
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: prepare release ${{ env.new_version }}"
          base: dev
          branch: release/${{ env.new_version }}
          title: "chore: prepare release ${{ env.new_version }}"
          body: |
            ## Changes
            ${{ steps.generate-changelog.outputs.changelog }}
          labels: "release: pending"

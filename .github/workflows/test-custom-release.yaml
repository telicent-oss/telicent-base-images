name: Create or Update Release Branch

on:
  workflow_dispatch:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

permissions:
  contents: write
  pull-requests: write

jobs:
  changed-images:
    if: "${{ !startsWith(github.event.pull_request.head.ref, 'release/')}}"
    name: Detect Changes
    uses: ./.github/workflows/detect-changed-images.yaml

  create-release-pr:
    needs: changed-images
    name: Create or Update Release PR
    runs-on: ubuntu-latest
    if: "${{ !startsWith(github.event.pull_request.head.ref, 'release/')}}"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine Next Release Version
        id: determine-version
        run: |
          echo "DEBUGGGGG: ${{github.event.pull_request}}
          # Extract the last release tag
          LAST_TAG=$(git describe --tags --abbrev=0 || echo "v0.0.0")
          echo "Last tag: $LAST_TAG"

          # Extract version numbers
          VERSION_PARTS=($(echo "${LAST_TAG}" | sed 's/v//' | tr '.' ' '))
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}

          # Determine bump type based on commit messages
          if git log "$LAST_TAG"..HEAD --oneline | grep -q "BREAKING CHANGE"; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif git log "$LAST_TAG"..HEAD --oneline | grep -q "feat"; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif git log "$LAST_TAG"..HEAD --oneline | grep -q -E "fix|chore"; then
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_ENV
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update Versions in Image Descriptors
        id: update-versions
        run: |
          echo "Updating image descriptors for version ${{ env.new_version }}."
          echo "Images that need updates: ${{ needs.changed-images.outputs.images }}"
          ./update_version.sh ${{ needs.changed-images.outputs.images }}

      - name: Append Changelog
        id: generate-changelog
        run: |
          ./generate_changelog.sh 
          echo "Generated changelog:"
          cat CHANGELOG.md

      - name: Commit Changes an

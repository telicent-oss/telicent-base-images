name: Create or Update Release Branch

on:
  workflow_dispatch:
  push:
    branches:
      - dev

jobs:
  changed-images:
    if: "${{ ! startsWith(github.ref_name, 'release') }}"
    name: Detect Changes
    uses: ./.github/workflows/detect-changed-images.yaml

  create-release-pr:
    needs: changed-images
    name: Create or Update Release PR
    runs-on: ubuntu-latest
    if: "${{ ! startsWith(github.ref, 'refs/release/') }}"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine Next Release Version
        id: determine-version
        run: |
          # Extract the last release tag
          LAST_TAG=$(git describe --tags --abbrev=0 || echo "v0.0.0")
          echo "Last tag: $LAST_TAG"

          # Extract version numbers
          VERSION_PARTS=($(echo "${LAST_TAG}" | sed 's/v//' | tr '.' ' '))
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}

          # Determine bump type based on commit messages
          if git log "$LAST_TAG"..HEAD --oneline | grep -q "BREAKING CHANGE"; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif git log "$LAST_TAG"..HEAD --oneline | grep -q "feat"; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif git log "$LAST_TAG"..HEAD --oneline | grep -q -E "fix|chore"; then
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_ENV
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Prepare or Update Release Branch
        id: prep-branch
        needs: determine-version
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Fetch existing release branch if it exists
          if git ls-remote --exit-code --heads origin release/${{ env.new_version }}; then
            echo "Branch release/${{ env.new_version }} already exists. Fetching and checking out."
            git fetch origin release/${{ env.new_version }}
            git checkout release/${{ env.new_version }}
          else
            echo "Branch release/${{ env.new_version }} does not exist. Creating from dev."
            git checkout -b release/${{ env.new_version }} dev
          fi

      - name: Update Versions in Image Descriptors
        id: update-versions
        needs: prep-branch
        run: |
          echo "Updating image descriptors for version ${{ env.new_version }}."
          echo "Images that need updates: ${{ needs.changed-images.outputs.images }}"
          ./update_version.sh ${{ needs.changed-images.outputs.images }}

      - name: Append Changelog
        needs: update-versions
        id: generate-changelog
        run: |
          ./generate_changelog.sh >> CHANGELOG.md
          echo "Generated changelog:"
          cat CHANGELOG.md

      - name: Commit Changes and Push Release Branch
        needs: generate-changelog
        run: |
          git branch -v
          git add .
          git commit -m "chore: prepare release ${{ env.new_version }}" || echo "No changes to commit."
          git push origin release/${{ env.new_version }}

      - name: Open or Update Release PR
        needs: generate-changelog
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: prepare release ${{ env.new_version }}"
          base: dev
          branch: release/${{ env.new_version }}
          title: "chore: prepare release ${{ env.new_version }}"
          body: |
            ## Changes
            ${{ steps.generate-changelog.outputs.changelog }}
          labels: "release: pending"
